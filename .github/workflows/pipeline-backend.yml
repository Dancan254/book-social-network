name: BSN Backend API CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths:
      - book-social-network/**
      - 'docker-compose.yml'
      - .github/workflows/pipeline-backend.yml
      - '**/Dockerfile'

jobs:
  build-and-push-image:
    name: Build & Push Docker Image to DockerHub
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build with Maven
        run: |
          cd book-social-network
          ./mvnw clean package -DskipTests

      - name: Extract project version
        id: extract_version
        run: |
          cd book-social-network
          echo "VERSION=$(./mvnw -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)" >> $GITHUB_OUTPUT

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: book-social-network
          file: book-social-network/Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{ secrets.DOCKER_USERNAME }}/bsn-api:${{ steps.extract_version.outputs.VERSION }}

  deploy-to-azure:
    name: Deploy to Azure App Service
    runs-on: ubuntu-latest
    needs: build-and-push-image

    steps:
      - name: Create deployment folder
        run: ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "mkdir -p ci-cd"

      - name: Copy docker-compose file
        run: scp -o StrictHostKeyChecking=no -i ${{ secrets.SSH_KEY }} docker-compose.yml ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:ci-cd/docker-compose.yml

      - name: Set environment variables and deploy
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << EOF
          export EMAIL_HOSTNAME=${{ secrets.EMAIL_HOST }}
          export EMAIL_USERNAME=${{ secrets.EMAIL_USERNAME }}
          export EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}
          cd ci-cd
          docker-compose -f docker-compose.yml pull -q
          docker-compose -f docker-compose.yml up -d
          EOF